
buildscript {
    ext {
        springBootVersion = '2.1.4.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath "gradle.plugin.com.arenagod.gradle:mybatis-generator-plugin:1.4"
    }
}
plugins {
    id 'org.springframework.boot' version '2.2.0.RELEASE'
    id 'io.spring.dependency-management' version '1.0.8.RELEASE'
    id 'java'
}
apply plugin: "com.arenagod.gradle.MybatisGenerator"

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

repositories {
    maven { url 'http://maven.aliyun.com/nexus/content/groups/public/' }
    maven { url 'https://jitpack.io' }
}

dependencies {
    implementation('org.springframework.boot:spring-boot-starter-data-redis')
    compileOnly("org.projectlombok:lombok:1.18.4")
    annotationProcessor("org.projectlombok:lombok:1.18.4")
    implementation("org.projectlombok:lombok:1.18.4")
    // https://mvnrepository.com/artifact/com.google.guava/guava
    compile group: 'com.google.guava', name: 'guava', version: '28.1-jre'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:2.1.1'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    // mysql connection
    implementation("com.alibaba:druid-spring-boot-starter:1.1.9")
    implementation("org.mariadb.jdbc:mariadb-java-client:2.1.2")

    // mybatis
    implementation("org.mybatis.spring.boot:mybatis-spring-boot-starter:1.3.3")
    implementation("org.mybatis.generator:mybatis-generator-core:1.3.7")

    mybatisGenerator 'org.mybatis.generator:mybatis-generator-core:1.3.6'
    mybatisGenerator 'org.mariadb.jdbc:mariadb-java-client:2.1.2'
    mybatisGenerator 'tk.mybatis:mapper:3.5.2'
    implementation 'com.github.wechatpay-apiv3:wechatpay-apache-httpclient:0.2.0'
    implementation 'junit:junit:4.12'

}
configurations {
    mybatisGenerator
}
//generate mapper/entity/xml ==> gradle mybatisGenerate
def getDbProperties = {
    def properties = new Properties()
    file("src/main/resources/mybatis/config.properties").withInputStream { inputStream ->
        properties.load(inputStream)
    }
    properties
}

//mybatis generator don't support gradle,call ant
task mybatisGenerate {
    doLast {
        def properties = getDbProperties()
        ant.properties['targetProject'] = projectDir.path
        ant.properties['driverClass'] = properties.getProperty("jdbc.driverClassName")
        ant.properties['connectionURL'] = properties.getProperty("jdbc.url")
        ant.properties['userId'] = properties.getProperty("jdbc.username")
        ant.properties['password'] = properties.getProperty("jdbc.password")
        ant.properties['src_main_java'] = sourceSets.main.java.srcDirs[0].path
        ant.properties['src_main_resources'] = sourceSets.main.resources.srcDirs[0].path
        ant.properties['modelPackage'] = properties.getProperty("package.model")
        ant.properties['mapperPackage'] = properties.getProperty("package.mapper")
        ant.properties['sqlMapperPackage'] = properties.getProperty("package.xml")
        ant.taskdef(
                name: 'mbgenerator',
                classname: 'org.mybatis.generator.ant.GeneratorAntTask',
                classpath: configurations.mybatisGenerator.asPath
        )
        ant.mbgenerator(overwrite: true,
                configfile: 'src/main/resources/mybatis/generatorConfig.xml', verbose: true) {
            propertyset {
                propertyref(name: 'targetProject')
                propertyref(name: 'userId')
                propertyref(name: 'driverClass')
                propertyref(name: 'connectionURL')
                propertyref(name: 'password')
                propertyref(name: 'src_main_java')
                propertyref(name: 'src_main_resources')
                propertyref(name: 'modelPackage')
                propertyref(name: 'mapperPackage')
                propertyref(name: 'sqlMapperPackage')
            }
        }
    }
}

test {
    useJUnitPlatform()
}
